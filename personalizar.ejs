<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personalizar Script - MULTCONTROL</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

    <style>
        body { font-family: 'Roboto', sans-serif; margin: 0; padding: 0; background-color: #f4f7f6; display: flex; flex-direction: column; align-items: center; }
        .navbar { background-color: #2c3e50; width: 100%; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .navbar-container { max-width: 1200px; margin: 0 auto; display: flex; justify-content: flex-start; }
        .navbar a { float: left; color: white; text-align: center; padding: 14px 20px; text-decoration: none; font-size: 17px; font-weight: bold; transition: background-color 0.3s; }
        .navbar a:hover { background-color: #3498db; }
        .navbar a.active { background-color: #2980b9; }
        .main-container { padding: 20px; width: 100%; max-width: 1100px; box-sizing: border-box; }
        .grid-container { display: grid; grid-template-columns: 1fr 2fr; gap: 30px; }
        .panel { background-color: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); }
        h1, h2 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; margin-top: 0; }
        .profile-manager { grid-column: 1 / -1; margin-bottom: 20px; }
        .profile-manager select { width: 100%; padding: 10px; font-size: 1.1em; }
        .btn { border: none; border-radius: 5px; padding: 8px 15px; cursor: pointer; font-size: 0.9em; font-weight: bold; transition: background-color 0.3s; }
        .btn-import { background-color: #546e7a; color: white; margin-left:10px; }
        .btn-info { background-color: #17a2b8; color: white; }
        #building-controls-container { display: flex; flex-direction: column; gap: 12px; }
        .building-control-row { display: flex; align-items: center; justify-content: space-between; background-color: #f8f9fa; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef; }
        .building-name { font-weight: 500; flex-basis: 50%; }
        .building-inputs { display: flex; align-items: center; gap: 8px; }
        .building-inputs input { width: 50px; text-align: center; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 0.9em; }
        .btn-add { background-color: #3498db; color: white; }
        #custom-order-list { min-height: 200px; max-height: 500px; overflow-y: auto; border: 1px dashed #ccc; border-radius: 5px; padding: 10px; background-color: #fafafa; }
        .order-item { display: flex; justify-content: space-between; align-items: center; background-color: #e3f2fd; padding: 10px; border-radius: 4px; margin-bottom: 5px; font-weight: 500; }
        .delete-btn { background: #e57373; color: white; border: none; border-radius: 50%; width: 22px; height: 22px; cursor: pointer; font-weight: bold; line-height: 22px; text-align: center; }
        .action-buttons { margin-top: 20px; display: flex; flex-wrap: wrap; gap: 10px; }
        .btn-save { background-color: #28a745; color: white; }
        .btn-clear { background-color: #e53935; color: white; }
        #script-generation-panel { grid-column: 1 / -1; margin-top: 20px; }
        #status-message { margin-top: 15px; color: #218838; font-weight: bold; text-align: center; height: 20px; }
        #script-list-container { display: flex; flex-direction: column; gap: 12px; }
        .script-list-item { display: flex; align-items: center; justify-content: space-between; background-color: #f8f9fa; padding: 10px 15px; border-radius: 5px; border: 1px solid #e9ecef; }
        .script-list-item strong { font-size: 1.1em; color: #333; }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.6); display: none; align-items: center; justify-content: center; z-index: 1000; }
        .modal-content { background: white; padding: 30px; border-radius: 8px; width: 90%; max-width: 600px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
        .modal-content h2 { margin-top: 0; }
        .modal-content textarea { width: 100%; height: 200px; box-sizing: border-box; font-family: 'Consolas', monospace; font-size: 0.9em; margin-top: 10px; background-color: #f4f4f4; color: #333; padding: 10px; border-radius: 5px; }
        .modal-actions { margin-top: 20px; display: flex; justify-content: flex-end; gap: 10px; }
    </style>
</head>
<body>

<nav class="navbar">
    <div class="navbar-container">
        <a href="/dashboard.html">Dashboard</a>
        <a href="/personalizar" class="active">Personalizar Scripts</a>
    </div>
</nav>

<div class="main-container">
    <h1>Gerenciador de Estrat√©gias de Constru√ß√£o</h1>
    
    <div class="panel profile-manager">
        <h2>Meus Perfis de Constru√ß√£o</h2>
        <div style="display: flex; gap: 10px; align-items: center;">
            <select id="profile-select" style="flex-grow: 1;">
                <option value="new">--- Criar Nova Ordem de Constru√ß√£o ---</option>
            </select>
            <button id="import-btn" class="btn btn-import">Importar Perfil (JSON)</button>
        </div>
    </div>

    <div class="grid-container">
        <div class="panel add-panel">
            <h2>Editor de Passos</h2>
            <div id="building-controls-container"><p>Aguardando autentica√ß√£o...</p></div>
        </div>

        <div class="panel custom-order">
            <h2 id="current-profile-name">Nova Ordem de Constru√ß√£o</h2>
            <div id="custom-order-list"><p>Selecione um perfil para carregar ou adicione passos para uma nova ordem.</p></div>
            <div class="action-buttons">
                <button id="save-order-btn" class="btn btn-save">Salvar Ordem Atual</button>
                <button id="export-order-btn" class="btn btn-info" style="display: none;">Exportar Perfil</button>
                <button id="delete-order-btn" class="btn btn-clear" style="display: none;">Deletar Perfil</button>
            </div>
            <div id="status-message"></div>
        </div>

        <div id="script-generation-panel" class="panel">
            <h2>Copiar Script de um Perfil Salvo</h2>
            <div id="script-list-container">
                <p>Nenhum perfil salvo encontrado.</p>
            </div>
        </div>
    </div>
</div>

<div id="import-export-modal" class="modal-overlay">
    <div class="modal-content">
        <h2 id="modal-title"></h2>
        <p id="modal-description"></p>
        <textarea id="modal-textarea"></textarea>
        <div class="modal-actions">
            <button id="modal-action-btn" class="btn btn-save"></button>
            <button id="modal-close-btn" class="btn btn-clear">Fechar</button>
        </div>
    </div>
</div>

<script>
    const firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    document.addEventListener('DOMContentLoaded', () => {
        const BUILDING_INFO = {
            'main': { name: 'Edif√≠cio Principal', icon: 'üèõÔ∏è' }, 'barracks': { name: 'Quartel', icon: '‚öîÔ∏è' }, 'stable': { name: 'Est√°bulo', icon: 'üêé' },
            'garage': { name: 'Oficina', icon: '‚öôÔ∏è' }, 'smith': { name: 'Ferreiro', icon: 'üõ†Ô∏è' }, 'place': { name: 'Pra√ßa de Reuni√£o', icon: 'üö©' },
            'statue': { name: 'Est√°tua', icon: 'üóø' }, 'market': { name: 'Mercado', icon: 'üí∞' }, 'wood': { name: 'Bosque', icon: 'üå≥' },
            'stone': { name: 'Po√ßo de Argila', icon: 'üß±' }, 'iron': { name: 'Mina de Ferro', icon: '‚õèÔ∏è' }, 'farm': { name: 'Fazenda', icon: 'üåæ' },
            'storage': { name: 'Armaz√©m', icon: 'üì¶' }, 'hide': { name: 'Esconderijo', icon: 'ü§´' }, 'wall': { name: 'Muralha', icon: 'üõ°Ô∏è' },
            'snob': { name: 'Academia de Nobres', icon: 'üëë' }, 'academy': { name: 'Academia', icon: 'üéì' }, 'watchtower': { name: 'Torre de Vigia', icon: 'üî≠' },
            'hospital': { name: 'Hospital', icon: 'üè•' }, 'church': { name: 'Igreja', icon: '‚õ™' }, 'trade': { name: 'Posto de Trocas', icon: 'ü§ù' }
        };
        let allProfiles = [];
        let currentProfile = null;
        let currentBuildOrder = [];

        const profileSelect = document.getElementById('profile-select');
        const controlsContainer = document.getElementById('building-controls-container');
        const customList = document.getElementById('custom-order-list');
        const currentProfileNameEl = document.getElementById('current-profile-name');
        const saveBtn = document.getElementById('save-order-btn');
        const deleteBtn = document.getElementById('delete-order-btn');
        const scriptListContainer = document.getElementById('script-list-container');
        const statusMsg = document.getElementById('status-message');
        const importBtn = document.getElementById('import-btn');
        const exportBtn = document.getElementById('export-order-btn');
        const modal = document.getElementById('import-export-modal');
        const modalTitle = document.getElementById('modal-title');
        const modalDescription = document.getElementById('modal-description');
        const modalTextarea = document.getElementById('modal-textarea');
        const modalActionBtn = document.getElementById('modal-action-btn');
        const modalCloseBtn = document.getElementById('modal-close-btn');
        
        async function apiRequest(endpoint, method = 'GET', body = null) { /* ... (sem altera√ß√µes) ... */ }
        function populateProfileSelect() { /* ... (sem altera√ß√µes) ... */ }
        
        function loadProfile(profileId) {
            if (profileId === 'new') {
                currentProfile = null;
                currentBuildOrder = [];
                currentProfileNameEl.textContent = "Nova Ordem de Constru√ß√£o";
                deleteBtn.style.display = 'none';
                exportBtn.style.display = 'none';
            } else {
                currentProfile = allProfiles.find(p => p.id === profileId);
                currentBuildOrder = currentProfile ? [...currentProfile.order] : [];
                currentProfileNameEl.textContent = Editando: ${currentProfile.profileName};
                deleteBtn.style.display = 'inline-block';
                exportBtn.style.display = 'inline-block';
            }
            renderCustomOrder();
        }

        async function handleSaveProfile() { /* ... (sem altera√ß√µes) ... */ }
        async function handleDeleteProfile() { /* ... (sem altera√ß√µes) ... */ }
        function renderScriptList() { /* ... (sem altera√ß√µes) ... */ }
        async function generateAndCopyScript(profile, buttonElement) { /* ... (sem altera√ß√µes) ... */ }
        const showStatus = (message, isError = false) => { /* ... (sem altera√ß√µes) ... */ };
        const renderCustomOrder = () => { /* ... (sem altera√ß√µes) ... */ };
        const populateBuildingControls = () => { /* ... (sem altera√ß√µes) ... */ };
        
        async function initializeApp(user) {
            populateBuildingControls();
            try {
                allProfiles = await apiRequest('build-orders');
                populateProfileSelect();
                renderScriptList();
                loadProfile('new');
            } catch (error) {
                showStatus(N√£o foi poss√≠vel carregar seus perfis: ${error.message}, true);
            }
        }

        auth.onAuthStateChanged(async (user) => {
            if (user) {
                initializeApp(user);
            } else {
                document.body.innerHTML = '<h1>Acesso Negado</h1><p>Voc√™ precisa estar logado para acessar esta p√°gina. Por favor, retorne √† <a href="/">p√°gina de login</a>.</p>';
            }
        });

        // --- EVENT LISTENERS ---
        profileSelect.addEventListener('change', (e) => loadProfile(e.target.value));
        saveBtn.addEventListener('click', handleSaveProfile);
        deleteBtn.addEventListener('click', handleDeleteProfile);
        controlsContainer.addEventListener('click', (e) => { /* ... (l√≥gica de adicionar passo) ... */ });
        customList.addEventListener('click', (e) => { /* ... (l√≥gica de deletar passo) ... */ });
        scriptListContainer.addEventListener('click', async (e) => { /* ... (l√≥gica de copiar script) ... */ });

        modalCloseBtn.addEventListener('click', () => modal.style.display = 'none');

        exportBtn.addEventListener('click', () => {
            if (!currentProfile) return;
            modalTitle.textContent = 'Exportar Perfil';
            modalDescription.textContent = 'Copie o c√≥digo JSON abaixo para salvar um backup ou compartilhar.';
            modalTextarea.readOnly = true;
            modalTextarea.value = JSON.stringify(currentBuildOrder, null, 2);
            modalActionBtn.textContent = 'Copiar C√≥digo';
            modalActionBtn.onclick = () => {
                modalTextarea.select();
                document.execCommand('copy');
                showStatus('C√≥digo copiado para a √°rea de transfer√™ncia!');
            };
            modal.style.display = 'flex';
        });

        importBtn.addEventListener('click', () => {
            modalTitle.textContent = 'Importar Perfil via JSON';
            modalDescription.textContent = 'Cole o c√≥digo JSON de uma ordem de constru√ß√£o exportada.';
            modalTextarea.readOnly = false;
            modalTextarea.value = '';
            modalActionBtn.textContent = 'Importar';
            modalActionBtn.onclick = () => {
                try {
                    const importedData = JSON.parse(modalTextarea.value);
                    if (!Array.isArray(importedData) || (importedData.length > 0 && (!importedData[0].hasOwnProperty('building') || !importedData[0].hasOwnProperty('level')))) {
                        throw new Error('Formato do JSON √© inv√°lido.');
                    }
                    loadProfile('new'); // Reseta para uma nova ordem
                    currentBuildOrder = importedData;
                    renderCustomOrder();
                    currentProfileNameEl.textContent = 'Nova Ordem (Importada)';
                    showStatus('Perfil importado com sucesso! Clique em "Salvar Ordem" para criar um novo perfil.');
                    modal.style.display = 'none';
                } catch (e) {
                    alert('Erro: O c√≥digo JSON fornecido √© inv√°lido ou est√° mal formatado.');
                }
            };
            modal.style.display = 'flex';
        });
    });
</script>

</body>
</html>
