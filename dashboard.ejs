<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Central de Alertas MULTCONTROL</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* ================================= */
        /* === ESTILOS DO NOVO MENU (NAVBAR) === */
        /* ================================= */
        .navbar {
            background-color: #2c3e50;
            width: 100%;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .navbar-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: flex-start;
        }
        .navbar a {
            float: left;
            color: white;
            text-align: center;
            padding: 14px 20px;
            text-decoration: none;
            font-size: 17px;
            font-weight: bold;
            transition: background-color 0.3s, color 0.3s;
        }
        .navbar a:hover {
            background-color: #3498db;
            color: white;
        }
        .navbar a.active {
            background-color: #2980b9;
            color: white;
        }

        /* Seus estilos originais abaixo */
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0; /* Removido padding para o navbar ocupar toda a largura */
            background-color: #f4f7f6;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }
        header {
            width: 100%;
            max-width: 1200px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 0 20px; /* Adicionado padding lateral */
            box-sizing: border-box;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 2em;
        }
        .user-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 5px;
        }
        .user-info p {
            margin: 0;
            font-size: 0.9em;
            color: #555;
        }
        .user-info p strong {
            font-size: 1em;
            color: #2c3e50;
        }
        button {
            background-color: #FF5722;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: bold;
            transition: background-color 0.3s ease;
            margin-top: 10px;
        }
        button:hover {
            background-color: #E64A19;
        }
        .script-generation-section {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 25px;
            margin-bottom: 30px;
            width: 100%;
            max-width: 1200px;
            box-sizing: border-box;
        }
        .script-generation-section h2 {
            text-align: center;
            color: #34495e;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        .script-type-box {
            background-color: #e3f2fd;
            border: 1px solid #90caf9;
            border-radius: 8px;
            padding: 15px 20px;
            margin-bottom: 15px;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        .script-type-box strong {
            color: #1976D2;
            font-size: 1.1em;
            display: block;
            margin-bottom: 0;
            flex-grow: 1;
        }
        .script-code-box {
            display: none;
            background-color: #f0f0f0;
            border: 1px dashed #ccc;
            padding: 10px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.8em;
            white-space: pre-wrap;
            overflow-x: auto;
            max-height: 250px;
            cursor: text;
            width: 100%;
            margin-top: 10px;
        }
        .copy-script-button {
            background-color: #2196F3;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8em;
            margin-top: 0;
            transition: background-color 0.2s;
            flex-shrink: 0;
        }
        .copy-script-button:hover {
            background-color: #1976D2;
        }
        .main-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            width: 100%;
            max-width: 1200px;
            justify-content: center;
            align-items: flex-start;
            flex-grow: 1;
            padding: 0 20px; /* Adicionado padding lateral */
            box-sizing: border-box;
        }
        .alert-box {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 30px;
            flex: 1;
            min-width: 300px;
            max-width: 380px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
        }
        h2 {
            color: #34495e;
            text-align: center;
            margin-top: 0;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        .alerts-list {
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            min-height: 150px;
            max-height: 300px;
            overflow-y: auto;
            padding: 15px;
            background-color: #fafafa;
            flex-grow: 1;
        }
        .alert-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 10px;
            padding: 10px 15px;
            background-color: #e3f2fd;
            border-left: 5px solid #2196F3;
            border-radius: 4px;
            transition: transform 0.2s ease-in-out;
            font-size: 0.9em;
        }
        .alert-item.captcha {
            border-left-color: #FFC107;
            background-color: #FFFDE7;
        }
        .alert-item.build-order {
            border-left-color: #4CAF50;
            background-color: #E8F5E9;
        }
        .alert-item.attack-alert {
            border-left-color: #D32F2F;
            background-color: #FFEBEE;
        }
        .alert-item:last-child {
            margin-bottom: 0;
        }
        .alert-item:hover {
            transform: translateY(-2px);
        }
        .alert-item .timestamp {
            font-weight: bold;
            color: #1976D2;
            margin-right: 10px;
            flex-shrink: 0;
            min-width: 65px;
        }
        .alert-item.captcha .timestamp { color: #FFA000; }
        .alert-item.build-order .timestamp { color: #388E3C; }
        .alert-item.attack-alert .timestamp { color: #C62828; }
        .alert-item .message {
            flex-grow: 1;
            word-break: break-word;
            display: flex;
            align-items: flex-start;
        }
        .alert-item .message .emoji-prefix {
            margin-right: 5px;
            font-size: 1.2em;
            line-height: 1;
            flex-shrink: 0;
        }
        .no-alerts {
            text-align: center;
            color: #777;
            padding: 20px;
        }
        .alerts-list::-webkit-scrollbar { width: 8px; }
        .alerts-list::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
        .alerts-list::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; }
        .alerts-list::-webkit-scrollbar-thumb:hover { background: #555; }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-container">
            <a href="/dashboard.html" class="active">Dashboard</a>
            <a href="/personalizar">Personalizar Scripts</a>
        </div>
    </nav>

    <header>
        <h1>üö® Central de Alertas Tribal Wars üö®</h1>
        <div class="user-info">
            <p id="userEmailDisplay"></p>
            <p>UID: <strong id="userUidDisplay"></strong></p>
            <button id="logoutBtn">Sair</button>
        </div>
    </header>

    <div class="script-generation-section">
        <h2>Seus Scripts Personalizados (Copiar e Colar no Tampermonkey)</h2>
        <p style="font-size: 0.9em; text-align: center; margin-bottom: 20px; color: #666;">
            <strong>Instru√ß√µes:</strong> Fa√ßa login aqui, copie o c√≥digo completo de cada script abaixo, abra seu Tampermonkey (ou similar), crie um novo script e cole o c√≥digo. Salve e ative o script no Tribal Wars.
        </p>
        <div class="script-type-box">
            <strong>1. Script: Alerta de Captcha (FUS√ÉO FINAL E LIMP√çSSIMA)</strong>
            <button class="copy-script-button" data-script-id="captchaScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="captchaScriptCode">Carregando script...</code>
            </div>
        </div>
        <div class="script-type-box">
            <strong>2. Script: Upador Automatico editado + Coleta Recompensa + Refresh Autom√°tico + Alerta de Constru√ß√£o</strong>
            <button class="copy-script-button" data-script-id="upadorScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="upadorScriptCode">Carregando script...</code>
            </div>
        </div>
        <div class="script-type-box">
            <strong>3. Script: Alerta de Ataques (Tribal Wars)</strong>
            <button class="copy-script-button" data-script-id="attackScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="attackScriptCode">Carregando script...</code>
            </div>
        </div>
    </div>

    <button id="activateNotificationsBtn" 
            style="background-color: #4CAF50; margin-top: 20px; margin-bottom: 20px; padding: 10px 20px; border: none; border-radius: 8px; color: white; cursor: pointer; font-size: 1em; font-weight: bold;">
        Ativar Notifica√ß√µes Desktop
    </button>
    <div class="main-container">
        <div class="alert-box captcha-box">
            <h2>Alertas de Captcha</h2>
            <div id="captchaAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando alertas de Captcha...</p>
            </div>
        </div>
        <div class="alert-box build-order-box">
            <h2>Ordens de Constru√ß√£o</h2>
            <div id="buildOrderAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando ordens de constru√ß√£o...</p>
            </div>
        </div>
        <div class="alert-box attack-box">
            <h2>Alertas de Ataque</h2>
            <div id="attackAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando alertas de ataque...</p>
            </div>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

    <script>
        const firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const dbClient = firebase.firestore();
    </script>

    <script>
        // Seu script principal (initializeDashboardPage) continua aqui, sem altera√ß√µes...
        // (Colei ele aqui para garantir que esteja completo)
        
        // Fun√ß√£o para copiar scripts
        window.copyScript = function(elementId) {
            const element = document.getElementById(elementId);
            if (element && navigator.clipboard) {
                const textToCopy = element.textContent;
                navigator.clipboard.writeText(textToCopy).then(() => {
                    alert('Script copiado para a √°rea de transfer√™ncia!');
                }).catch(err => {
                    console.error('Erro ao copiar texto: ', err);
                    alert('N√£o foi poss√≠vel copiar o script. Por favor, selecione e copie manualmente.');
                });
            } else {
                alert('Seu navegador n√£o suporta a c√≥pia autom√°tica. Por favor, selecione o texto e copie manualmente.');
            }
        };

        // Fun√ß√£o para solicitar permiss√£o de notifica√ß√£o
        function requestNotificationPermission() {
            if (!("Notification" in window)) {
                console.warn("Este navegador n√£o suporta notifica√ß√µes de desktop.");
            } else if (Notification.permission === "default") {
                Notification.requestPermission().then(permission => {
                    if (permission === "granted") {
                        console.log("Permiss√£o para notifica√ß√µes concedida.");
                        alert('Notifica√ß√µes de desktop ativadas!');
                    } else if (permission === "denied") {
                        console.warn("Permiss√£o para notifica√ß√µes negada.");
                        alert('Permiss√£o para notifica√ß√µes negada. Por favor, altere nas configura√ß√µes do navegador.');
                    }
                });
            } else if (Notification.permission === "granted") {
                alert('As notifica√ß√µes j√° est√£o ativadas.');
            } else if (Notification.permission === "denied") {
                 alert('As notifica√ß√µes est√£o bloqueadas. Por favor, permita nas configura√ß√µes do navegador.');
            }
        }

        // Fun√ß√£o principal de inicializa√ß√£o
        function initializeDashboardPage() {
            const userEmailDisplay = document.getElementById('userEmailDisplay');
            const logoutBtn = document.getElementById('logoutBtn');
            const userUidDisplay = document.getElementById('userUidDisplay');
            const captchaScriptCodeElement = document.getElementById('captchaScriptCode');
            const upadorScriptCodeElement = document.getElementById('upadorScriptCode');
            const attackScriptCodeElement = document.getElementById('attackScriptCode');
            const captchaAlertsList = document.getElementById('captchaAlertsList');
            const buildOrderAlertsList = document.getElementById('buildOrderAlertsList');
            const attackAlertsList = document.getElementById('attackAlertsList');
            const backendUrl = 'https://multcontrol.onrender.com';
            
            document.querySelectorAll('.copy-script-button').forEach(button => {
                button.addEventListener('click', (event) => {
                    const scriptId = event.target.dataset.scriptId;
                    window.copyScript(scriptId);
                });
            });

            const activateNotificationsButton = document.getElementById('activateNotificationsBtn');
            if (activateNotificationsButton) {
                activateNotificationsButton.addEventListener('click', requestNotificationPermission);
            }

            auth.onAuthStateChanged(async user => {
                if (user) {
                    userEmailDisplay.textContent = `Logado como: ${user.email}`;
                    userUidDisplay.textContent = user.uid;

                    // Fetch scripts
                    try {
                        const idToken = await user.getIdToken();
                        const response = await fetch(`${backendUrl}/get_userscripts_with_token`, {
                            headers: { 'Authorization': `Bearer ${idToken}` }
                        });
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        const scriptsBase64 = await response.json();
                        captchaScriptCodeElement.textContent = atob(scriptsBase64.captchaScriptBase64);
                        upadorScriptCodeElement.textContent = atob(scriptsBase64.upadorScriptBase64);
                        attackScriptCodeElement.textContent = atob(scriptsBase64.ataquesScriptBase64);
                    } catch (error) {
                        console.error('Erro ao obter scripts:', error);
                        captchaScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}.`;
                        upadorScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}.`;
                        attackScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}.`;
                    }
                    
                    // Firestore listener
                    const notifiedAlertIds = new Set(JSON.parse(localStorage.getItem('notifiedAlertIds') || '[]'));
                    dbClient.collection('alerts')
                        .where('userId', '==', user.uid)
                        .orderBy('timestamp', 'desc')
                        .onSnapshot((snapshot) => {
                            // L√≥gica de notifica√ß√£o para novos alertas
                            snapshot.docChanges().forEach(change => {
                                if (change.type === "added") {
                                    const newAlertData = change.doc.data();
                                    const alertId = change.doc.id;
                                    if (!notifiedAlertIds.has(alertId)) {
                                        if (document.hidden && Notification.permission === "granted") {
                                            const alertMessage = newAlertData.message;
                                            const nicknameMatch = alertMessage.match(/Conta "([^"]+)"/);
                                            const alertNickname = nicknameMatch ? nicknameMatch[1] : (newAlertData.userEmail.split('@')[0]);
                                            
                                            if (alertMessage.includes('CAPTCHA NECESSARIO!')) {
                                                new Notification("üö® A√á√ÉO NECESS√ÅRIA! Captcha!", {
                                                    body: `Captcha detectado para a conta: ${alertNickname}`,
                                                    icon: 'https://www.google.com/favicon.ico'
                                                });
                                            } else if (alertMessage.includes('ATAQUE(S) NOVO(S)!')) {
                                                new Notification("‚öîÔ∏è NOVO ATAQUE EM TRIBAL WARS!", {
                                                    body: `A conta ${alertNickname} tem novos ataques a chegar!`,
                                                    icon: 'https://dsbr.innogamescdn.com/asset/75cb846c/graphic/unit/att.webp'
                                                });
                                            }
                                        }
                                        notifiedAlertIds.add(alertId);
                                    }
                                }
                            });
                            localStorage.setItem('notifiedAlertIds', JSON.stringify(Array.from(notifiedAlertIds)));

                            // L√≥gica para renderizar todos os alertas na tela
                            const alertsToRender = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                            captchaAlertsList.innerHTML = ''; buildOrderAlertsList.innerHTML = ''; attackAlertsList.innerHTML = '';
                            let hasCaptchaAlerts = false, hasBuildOrderAlerts = false, hasAttackAlerts = false;

                            alertsToRender.forEach(alert => {
                                const div = document.createElement('div');
                                div.className = 'alert-item';
                                const timestampSpan = document.createElement('span');
                                timestampSpan.className = 'timestamp';
                                const date = alert.timestamp ? alert.timestamp.toDate() : new Date();
                                timestampSpan.textContent = date.toLocaleTimeString('pt-BR');
                                
                                const messageSpan = document.createElement('span');
                                messageSpan.className = 'message';
                                const emojiSpan = document.createElement('span');
                                emojiSpan.className = 'emoji-prefix';

                                const cleanMessage = alert.message.replace(/^[^\w\s]*\s*/, '');
                                if (cleanMessage.includes('CAPTCHA')) {
                                    div.classList.add('captcha'); emojiSpan.textContent = 'üö®‚ö†Ô∏è';
                                    captchaAlertsList.appendChild(div); hasCaptchaAlerts = true;
                                } else if (cleanMessage.includes('Construcao')) {
                                    div.classList.add('build-order'); emojiSpan.textContent = 'üö®üè∞';
                                    buildOrderAlertsList.appendChild(div); hasBuildOrderAlerts = true;
                                } else if (cleanMessage.includes('ATAQUE')) {
                                    div.classList.add('attack-alert'); emojiSpan.textContent = 'üö®‚öîÔ∏è';
                                    attackAlertsList.appendChild(div); hasAttackAlerts = true;
                                } else {
                                    div.classList.add('general'); emojiSpan.textContent = '‚ÑπÔ∏è';
                                    buildOrderAlertsList.appendChild(div); hasBuildOrderAlerts = true;
                                }
                                
                                messageSpan.appendChild(emojiSpan);
                                messageSpan.appendChild(document.createTextNode(cleanMessage));
                                div.appendChild(timestampSpan);
                                div.appendChild(messageSpan);
                            });

                            if (!hasCaptchaAlerts) captchaAlertsList.innerHTML = '<p class="no-alerts">Nenhum alerta de Captcha recente.</p>';
                            if (!hasBuildOrderAlerts) buildOrderAlertsList.innerHTML = '<p class="no-alerts">Nenhuma ordem de constru√ß√£o recente.</p>';
                            if (!hasAttackAlerts) attackAlertsList.innerHTML = '<p class="no-alerts">Nenhum alerta de ataque recente.</p>';

                        }, (error) => {
                            console.error('[Dashboard] Erro ao ouvir alertas:', error);
                        });
                } else {
                    window.location.href = '/';
                }
            });

            logoutBtn.addEventListener('click', async () => {
                try {
                    await auth.signOut();
                    window.location.href = '/';
                } catch (error) {
                    console.error('Erro ao deslogar:', error);
                }
            });
        }

        initializeDashboardPage();
    </script>
</body>
</html>
