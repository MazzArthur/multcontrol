<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Atribuir Perfis - MULTCONTROL</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
    <style>
        @font-face {
            font-family: 'MedievalSharp';
            src: url('MedievalSharp-Regular.ttf') format('truetype');
        }

        html { font-size: clamp(14px, 1.5vw + 0.5rem, 16px); }
        body {
            margin: 0; padding: 0; font-family: 'MedievalSharp', cursive;
            font-size: 1rem; color: #eee;
            background: url('https://i.imgur.com/spPUGqP.png') repeat, #30221d;
            background-size: cover; display: flex; flex-direction: column;
            align-items: center; min-height: 100vh;
        }
        
        /* --- ESTILOS DA NAVBAR --- */
        .navbar {
            background-color: rgba(25, 20, 18, 0.5); backdrop-filter: blur(4px);
            width: 100%; box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            margin-bottom: 20px; border-bottom: 1px solid rgba(207, 163, 68, 0.3);
            position: sticky; top: 0; z-index: 1000;
        }
        .navbar-container {
            max-width: 1200px; margin: 0 auto; padding: 0 20px;
            display: flex; justify-content: space-between; align-items: center;
            height: 60px;
        }
        .navbar-left, .navbar-right { display: flex; align-items: center; gap: 20px; }
        .navbar-logo { height: 40px; width: auto; }
        .navbar a {
            color: #fff8dc; text-align: center; padding: 10px 15px;
            text-decoration: none; font-size: 1.1rem; font-weight: bold;
            transition: background-color 0.3s; border-radius: 6px;
        }
        .navbar a:hover { background-color: rgba(207, 163, 68, 0.8); color: #111; }
        .navbar a.active { background-color: #cfa344; color: #111; }
        .navbar-user-info { display: flex; align-items: center; gap: 15px; }
        .navbar-user-info .user-details { text-align: right; }
        .navbar-user-info p { margin: 0; font-size: 0.9em; color: #ccc; line-height: 1.3; font-family: 'Roboto', sans-serif;}
        .navbar-user-info strong { color: #fff8dc; font-family: 'Roboto', sans-serif; font-weight: bold; }
        #logoutBtn {
            background: rgba(198, 40, 40, 0.6); border: 1px solid #D32F2F; color: #fff8dc;
            padding: 8px 12px; font-size: 0.9rem; font-family: 'MedievalSharp', cursive;
            border-radius: 0.5rem; cursor: pointer; transition: all 0.3s ease;
        }
        #logoutBtn:hover { background-color: rgba(211, 47, 47, 0.7); }

        /* --- ESTILOS GERAIS DA PÁGINA --- */
        .main-container {
            padding: 30px; width: 100%; max-width: 900px; box-sizing: border-box;
            background: rgba(43, 30, 25, 0.25); backdrop-filter: blur(2px);
            border: 1px solid rgba(207, 163, 68, 0.3);
            border-radius: 1rem; box-shadow: 0 0 1.5rem rgba(0, 0, 0, 0.4);
        }
        h1 {
            font-family: 'MedievalSharp', cursive; color: #fff8dc;
            text-align: center; border-bottom: 1px solid rgba(207, 163, 68, 0.5);
            padding-bottom: 15px; margin-bottom: 25px;
        }
        p { font-family: 'Roboto', sans-serif; }
        
        .assignment-row {
            display: flex; align-items: center; justify-content: space-between;
            padding: 15px 10px; border-bottom: 1px solid rgba(207, 163, 68, 0.2);
            gap: 20px;
        }
        .assignment-row:last-child { border-bottom: none; }
        .nickname-label {
            font-size: 1.1em; font-weight: bold;
            font-family: 'Roboto', sans-serif; color: #eee;
        }
        .profile-select {
            padding: 8px; border: 1px solid #cfa344; border-radius: 4px;
            font-size: 1em; min-width: 250px;
            background-color: rgba(255, 255, 255, 0.8); color: #333;
        }
        .save-btn {
            display: block; width: 100%; padding: 15px; margin-top: 30px;
            background-color: rgba(40, 167, 69, 0.7);
            border: 2px solid #28a745;
            color: white; border-radius: 5px; font-size: 1.2em;
            font-weight: bold; cursor: pointer; transition: background-color 0.3s;
            font-family: 'MedievalSharp', cursive;
        }
        .save-btn:hover:not(:disabled) { background-color: rgba(40, 167, 69, 0.9); }
        .save-btn:disabled { background-color: #555; border-color: #444; cursor: not-allowed; }
        
        #loading-message, #no-nicknames-message { text-align: center; color: #aaa; font-size: 1.1em; padding: 20px; }
        #status-message { text-align: center; font-weight: bold; color: #b9f6ca; height: 20px; margin-top: 15px; }
        #status-message.error { color: #ff8a80; }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-container">
            <div class="navbar-left">
                <img src="https://i.imgur.com/l957Jp1.png" alt="Logo" class="navbar-logo">
                <a href="/dashboard.html">Dashboard</a>
                <a href="/personalizar">Perfis</a>
                <a href="/atribuicoes" class="active">Atribuir Perfis</a>
            </div>
            <div class="navbar-right">
                 <div class="navbar-user-info">
                    <div class="user-details">
                        <p id="userEmailDisplay"></p>
                        <p>UID: <strong id="userUidDisplay"></strong></p>
                    </div>
                    <button id="logoutBtn">Sair</button>
                </div>
            </div>
        </div>
    </nav>

    <div class="main-container">
        <h1>Atribuir Perfil de Construção por Conta</h1>
        <p style="text-align: center; color: #ccc; margin-bottom: 20px;">
            Aqui você define qual perfil de construção será usado para cada conta do jogo.
        </p>

        <div id="assignments-container"></div>
        <div id="loading-message"><p>Carregando seus dados...</p></div>
        <div id="no-nicknames-message" style="display: none;"><p>Nenhuma conta de jogo foi detectada. Execute o script upador em uma de suas contas para registrá-la aqui.</p></div>
        <button id="save-assignments-btn" class="save-btn" style="display: none;">Salvar Atribuições</button>
        <div id="status-message"></div>
    </div>

<script>
    const firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    document.addEventListener('DOMContentLoaded', () => {
        auth.onAuthStateChanged(async (user) => {
            if (user) {
                initializeApp(user);
            } else {
                document.body.innerHTML = '<h1>Acesso Negado</h1><p>Você precisa estar logado para acessar esta página. Por favor, retorne à <a href="/">página de login</a>.</p>';
            }
        });

        async function initializeApp(user) {
            // Lógica da Navbar
            const userEmailDisplay = document.getElementById('userEmailDisplay');
            const userUidDisplay = document.getElementById('userUidDisplay');
            const logoutBtn = document.getElementById('logoutBtn');
            if(userEmailDisplay) userEmailDisplay.textContent = user.email;
            if(userUidDisplay) userUidDisplay.textContent = user.uid;
            if(logoutBtn) logoutBtn.addEventListener('click', () => auth.signOut().then(() => { window.location.href = '/'; }));

            // Lógica original da página
            const loadingMessage = document.getElementById('loading-message');
            const assignmentsContainer = document.getElementById('assignments-container');
            const noNicknamesMessage = document.getElementById('no-nicknames-message');
            const saveBtn = document.getElementById('save-assignments-btn');
            const statusMessage = document.getElementById('status-message');

            async function apiRequest(endpoint, method = 'GET', body = null) {
                const idToken = await user.getIdToken();
                const options = { method, headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${idToken}` } };
                if (body) options.body = JSON.stringify(body);
                const response = await fetch(`/api/${endpoint}`, options);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Falha na requisição à API.');
                }
                return response.status !== 204 ? await response.json() : null;
            }

            function renderAssignments(nicknames, profiles, currentAssignments) {
                assignmentsContainer.innerHTML = '';
                if (nicknames.length === 0) {
                    noNicknamesMessage.style.display = 'block';
                    saveBtn.style.display = 'none';
                    return;
                }

                nicknames.forEach(nickname => {
                    const row = document.createElement('div');
                    row.className = 'assignment-row';

                    const label = document.createElement('label');
                    label.className = 'nickname-label';
                    label.textContent = nickname.name;
                    label.htmlFor = `select-${nickname.name}`;

                    const select = document.createElement('select');
                    select.className = 'profile-select';
                    select.id = `select-${nickname.name}`;
                    select.dataset.nickname = nickname.name;

                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = '--- Padrão do Script ---';
                    select.appendChild(defaultOption);

                    profiles.forEach(profile => {
                        const option = document.createElement('option');
                        option.value = profile.id;
                        option.textContent = profile.profileName;
                        select.appendChild(option);
                    });

                    if (currentAssignments[nickname.name]) {
                        select.value = currentAssignments[nickname.name];
                    }

                    row.appendChild(label);
                    row.appendChild(select);
                    assignmentsContainer.appendChild(row);
                });

                saveBtn.style.display = 'block';
            }

            saveBtn.addEventListener('click', async () => {
                const selects = document.querySelectorAll('.profile-select');
                const assignments = {};
                selects.forEach(select => {
                    if (select.value) { 
                        assignments[select.dataset.nickname] = select.value;
                    }
                });
                
                saveBtn.disabled = true;
                saveBtn.textContent = 'Salvando...';
                try {
                    await apiRequest('assignments', 'POST', { assignments });
                    statusMessage.textContent = "Atribuições salvas com sucesso!";
                    statusMessage.classList.remove('error');
                    setTimeout(() => statusMessage.textContent = '', 3000);
                } catch (error) {
                    statusMessage.style.color = 'red';
                    statusMessage.textContent = `Erro ao salvar: ${error.message}`;
                    statusMessage.classList.add('error');
                } finally {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Salvar Atribuições';
                }
            });

            try {
                const [nicknames, profiles, currentAssignments] = await Promise.all([
                    apiRequest('nicknames'),
                    apiRequest('build-orders'),
                    apiRequest('assignments')
                ]);
                
                loadingMessage.style.display = 'none';
                renderAssignments(nicknames, profiles, currentAssignments || {});
            } catch (error) {
                loadingMessage.textContent = `Erro ao carregar dados: ${error.message}`;
            }
        }
    });
</script>
</body>
</html>
