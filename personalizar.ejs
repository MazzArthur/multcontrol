<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personalizar Script - MULTCONTROL</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Roboto', sans-serif; margin: 0; padding: 0; background-color: #f4f7f6; display: flex; flex-direction: column; align-items: center; }
        .navbar { background-color: #2c3e50; width: 100%; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .navbar-container { max-width: 1200px; margin: 0 auto; display: flex; justify-content: flex-start; }
        .navbar a { float: left; color: white; text-align: center; padding: 14px 20px; text-decoration: none; font-size: 17px; font-weight: bold; transition: background-color 0.3s; }
        .navbar a:hover { background-color: #3498db; }
        .navbar a.active { background-color: #2980b9; }
        
        .main-container { padding: 20px; width: 100%; max-width: 1100px; box-sizing: border-box; }
        .grid-container { display: grid; grid-template-columns: 1fr 2fr; gap: 30px; }
        .panel { background-color: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); }
        h1, h2 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; margin-top: 0; }
        
        /* Painel de Adicionar */
        .add-panel-controls { display: flex; gap: 10px; align-items: center; }
        .add-panel-controls select, .add-panel-controls input { padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 1em; }
        .add-panel-controls input[type="number"] { width: 60px; }
        .btn { border: none; border-radius: 5px; padding: 10px 20px; cursor: pointer; font-size: 1em; font-weight: bold; transition: background-color 0.3s; }
        .btn-add { background-color: #3498db; color: white; }
        .btn-add:hover { background-color: #2980b9; }

        /* Ordem Customizada */
        #custom-order-list { min-height: 200px; max-height: 400px; overflow-y: auto; border: 1px dashed #ccc; border-radius: 5px; padding: 10px; background-color: #fafafa; }
        .order-item { display: flex; justify-content: space-between; align-items: center; background-color: #e3f2fd; padding: 10px; border-radius: 4px; margin-bottom: 5px; font-weight: 500; }
        .delete-btn { background: #e57373; color: white; border: none; border-radius: 50%; width: 22px; height: 22px; cursor: pointer; font-weight: bold; line-height: 22px; text-align: center; }
        .delete-btn:hover { background: #d32f2f; }

        /* Botões de Ação */
        .action-buttons { margin-top: 20px; display: flex; gap: 10px; }
        .btn-save { background-color: #28a745; color: white; }
        .btn-save:hover { background-color: #218838; }
        .btn-reset { background-color: #ffc107; color: #333; }
        .btn-reset:hover { background-color: #e0a800; }

        /* Geração de Script */
        #script-generation-panel { grid-column: 1 / -1; margin-top: 20px; }
        #final-script-output { width: 100%; height: 300px; box-sizing: border-box; font-family: 'Consolas', monospace; font-size: 0.9em; margin-top: 10px; background-color: #2d2d2d; color: #dcdcdc; padding: 15px; border-radius: 5px; }
        #status-message { margin-top: 15px; color: #218838; font-weight: bold; text-align: center; height: 20px; }
    </style>
</head>
<body>

<nav class="navbar">
    <div class="navbar-container">
        <a href="/dashboard.html">Dashboard</a>
        <a href="/personalizar" class="active">Personalizar Scripts</a>
    </div>
</nav>

<div class="main-container">
    <h1>Ferramenta de Personalização do Script Upador</h1>
    
    <div class="grid-container">
        <div class="panel add-panel">
            <h2>Adicionar à Ordem</h2>
            <div class="add-panel-controls">
                <select id="building-select"></select>
                <input type="number" id="level-input" value="1" min="1" max="30">
                <button id="add-btn" class="btn btn-add">Adicionar</button>
            </div>
        </div>

        <div class="panel custom-order">
            <h2>Sua Ordem de Construção</h2>
            <p style="font-size: 0.9em; color: #666;">Adicione edifícios e níveis para montar sua sequência.</p>
            <div id="custom-order-list"></div>
            <div class="action-buttons">
                <button id="save-order-btn" class="btn btn-save">Salvar Ordem</button>
                <button id="reset-order-btn" class="btn btn-reset">Usar Ordem Padrão</button>
            </div>
            <div id="status-message"></div>
        </div>

        <div id="script-generation-panel" class="panel">
            <h2>Gerar e Copiar seu Script</h2>
            <p style="font-size: 0.9em; color: #666;">Após salvar sua ordem, clique para gerar o script final com suas modificações.</p>
            <div class="action-buttons">
                 <button id="generate-script-btn" class="btn btn-save">Gerar Script</button>
                 <button id="copy-script-btn" class="btn btn-reset" style="display: none;">Copiar Script</button>
            </div>
            <textarea id="final-script-output" readonly placeholder="Seu script personalizado aparecerá aqui..."></textarea>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- CONFIGURAÇÕES ---
        const ALL_BUILDINGS = ['main', 'barracks', 'stable', 'garage', 'smith', 'place', 'statue', 'market', 'wood', 'stone', 'iron', 'farm', 'storage', 'hide', 'wall', 'snob', 'academy', 'watchtower', 'hospital', 'church', 'trade'];
        const DEFAULT_BUILD_ORDER = [
            { building: 'wood', level: 1 }, { building: 'stone', level: 1 }, { building: 'iron', level: 1 },
            { building: 'main', level: 2 }, { building: 'main', level: 3 }, { building: 'barracks', level: 1 }
        ];

        // --- ELEMENTOS DA DOM ---
        const buildingSelect = document.getElementById('building-select');
        const levelInput = document.getElementById('level-input');
        const addBtn = document.getElementById('add-btn');
        const customList = document.getElementById('custom-order-list');
        const saveBtn = document.getElementById('save-order-btn');
        const resetBtn = document.getElementById('reset-order-btn');
        const generateBtn = document.getElementById('generate-script-btn');
        const copyBtn = document.getElementById('copy-script-btn');
        const finalScriptOutput = document.getElementById('final-script-output');
        const statusMsg = document.getElementById('status-message');

        let currentBuildOrder = [];

        // --- FUNÇÕES ---
        const showStatus = (message, isError = false) => {
            statusMsg.textContent = message;
            statusMsg.style.color = isError ? '#d32f2f' : '#218838';
            setTimeout(() => statusMsg.textContent = '', 4000);
        };

        const renderCustomOrder = () => {
            customList.innerHTML = '';
            currentBuildOrder.forEach((item, index) => {
                const el = document.createElement('div');
                el.className = 'order-item';
                el.innerHTML = `<span>${index + 1}. <strong>${item.building}</strong> - Nível ${item.level}</span><button class="delete-btn" data-index="${index}">×</button>`;
                customList.appendChild(el);
            });
        };

        const populateBuildingSelect = () => {
            ALL_BUILDINGS.forEach(b => {
                const option = document.createElement('option');
                option.value = b;
                option.textContent = b;
                buildingSelect.appendChild(option);
            });
        };

        const initialize = () => {
            const savedOrder = localStorage.getItem('customBuildOrder');
            currentBuildOrder = savedOrder ? JSON.parse(savedOrder) : [...DEFAULT_BUILD_ORDER];
            populateBuildingSelect();
            renderCustomOrder();
        };

        // --- EVENT LISTENERS ---
        addBtn.addEventListener('click', () => {
            const building = buildingSelect.value;
            const level = parseInt(levelInput.value, 10);
            if (level > 0) {
                currentBuildOrder.push({ building, level });
                renderCustomOrder();
            }
        });

        customList.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-btn')) {
                const indexToRemove = parseInt(e.target.dataset.index, 10);
                currentBuildOrder.splice(indexToRemove, 1);
                renderCustomOrder();
            }
        });

        saveBtn.addEventListener('click', () => {
            localStorage.setItem('customBuildOrder', JSON.stringify(currentBuildOrder));
            showStatus('Ordem personalizada salva com sucesso!');
        });

        resetBtn.addEventListener('click', () => {
            if (confirm('Tem certeza que deseja reverter para a ordem padrão?')) {
                currentBuildOrder = [...DEFAULT_BUILD_ORDER];
                renderCustomOrder();
                localStorage.setItem('customBuildOrder', JSON.stringify(currentBuildOrder));
                showStatus('Ordem revertida para o padrão e salva.');
            }
        });

        generateBtn.addEventListener('click', async () => {
            generateBtn.textContent = 'Gerando...';
            generateBtn.disabled = true;
            finalScriptOutput.value = '';
            copyBtn.style.display = 'none';

            try {
                const response = await fetch('/api/get-raw-script/upador');
                if (!response.ok) throw new Error(`Não foi possível buscar o script (Status: ${response.status})`);
                const baseScript = await response.text();

                // Transforma a ordem [{b:'wood', l:1}] para "main_buildlink_wood_1"
                const newOrderString = currentBuildOrder.map(item => {
                    return `        "main_buildlink_${item.building}_${item.level}"`;
                }).join(',\n');
                
                // Cria a nova função completa com a nova ordem
                const newFunctionString = `function getConstrucao_Edifcios_Serie() {\n    const Sequencia_Construcao = [\n${newOrderString}\n    ];\n\n    return Sequencia_Construcao;\n}`;
                
                // Regex para encontrar a função inteira, desde "function" até o "}" final
                const functionRegex = /function\s+getConstrucao_Edifcios_Serie\s*\(\)\s*\{[\s\S]*?\}/i;

                if (!functionRegex.test(baseScript)) {
                    throw new Error("Não foi possível encontrar a função 'getConstrucao_Edifcios_Serie()' no script original. Verifique o nome da função.");
                }
                
                const finalScript = baseScript.replace(functionRegex, newFunctionString);
                
                finalScriptOutput.value = finalScript;
                copyBtn.style.display = 'inline-block';
                showStatus('Script gerado com sucesso!');

            } catch (error) {
                showStatus(`Erro: ${error.message}`, true);
                finalScriptOutput.value = `Ocorreu um erro ao gerar o script:\n\n${error.message}`;
            } finally {
                generateBtn.textContent = 'Gerar Script';
                generateBtn.disabled = false;
            }
        });

        copyBtn.addEventListener('click', () => {
            finalScriptOutput.select();
            document.execCommand('copy');
            showStatus('Script copiado para a área de transferência!');
        });

        // --- INICIALIZAÇÃO DA PÁGINA ---
        initialize();
    });
</script>

</body>
</html>
