<!DOCTYPE html>
<html lang="pt-BR">
<head>
    </head>
<body>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        console.log('[DEBUG] 1. DOM totalmente carregado. Iniciando script.');

        // --- CONFIGURA√á√ïES ---
        const BUILDING_INFO = {
            'main': { name: 'Edif√≠cio Principal', icon: 'üèõÔ∏è' }, 'barracks': { name: 'Quartel', icon: '‚öîÔ∏è' }, 'stable': { name: 'Est√°bulo', icon: 'üêé' },
            'garage': { name: 'Oficina', icon: '‚öôÔ∏è' }, 'smith': { name: 'Ferreiro', icon: 'üõ†Ô∏è' }, 'place': { name: 'Pra√ßa de Reuni√£o', icon: 'üö©' },
            'statue': { name: 'Est√°tua', icon: 'üóø' }, 'market': { name: 'Mercado', icon: 'üí∞' }, 'wood': { name: 'Bosque', icon: 'üå≥' },
            'stone': { name: 'Po√ßo de Argila', icon: 'üß±' }, 'iron': { name: 'Mina de Ferro', icon: '‚õèÔ∏è' }, 'farm': { name: 'Fazenda', icon: 'üåæ' },
            'storage': { name: 'Armaz√©m', icon: 'üì¶' }, 'hide': { name: 'Esconderijo', icon: 'ü§´' }, 'wall': { name: 'Muralha', icon: 'üõ°Ô∏è' },
            'snob': { name: 'Academia de Nobres', icon: 'üëë' }, 'academy': { name: 'Academia', icon: 'üéì' }, 'watchtower': { name: 'Torre de Vigia', icon: 'üî≠' },
            'hospital': { name: 'Hospital', icon: 'üè•' }, 'church': { name: 'Igreja', icon: '‚õ™' }, 'trade': { name: 'Posto de Trocas', icon: 'ü§ù' }
        };
        let DEFAULT_BUILD_ORDER = [];
        let currentBuildOrder = [];

        // --- ELEMENTOS DA DOM ---
        const controlsContainer = document.getElementById('building-controls-container');
        const customList = document.getElementById('custom-order-list');
        // ... (resto dos elementos)

        // --- FUN√á√ïES ---
        
        async function loadDefaultOrder() {
            console.log('[DEBUG] 4. Entrando em loadDefaultOrder.');
            try {
                console.log('[DEBUG] 5. Tentando fazer fetch para /api/get-raw-script/upador');
                const response = await fetch('/api/get-raw-script/upador');
                console.log(`[DEBUG] 6. Resposta do fetch recebida. Status: ${response.status}`);

                if (!response.ok) {
                    throw new Error(`Falha ao buscar o script padr√£o (Status: ${response.status})`);
                }
                const scriptText = await response.text();
                console.log('[DEBUG] 7. Texto do script recebido. Tentando parsear...');

                const functionRegex = /const\s+Sequencia_Construcao\s*=\s*\[([\s\S]*?)\];/i;
                const match = scriptText.match(functionRegex);

                if (!match || !match[1]) {
                    throw new Error('N√£o foi poss√≠vel encontrar a "Sequencia_Construcao" no script.');
                }
                console.log('[DEBUG] 8. Regex encontrou a sequ√™ncia. Extraindo itens...');

                const items = match[1].match(/"(.*?)"/g) || [];
                const parsedOrder = items.map(item => {
                    const cleanItem = item.replace(/"/g, '').trim();
                    const parts = cleanItem.split('_');
                    if (parts.length === 4) {
                        return { building: parts[2], level: parseInt(parts[3], 10) };
                    }
                    return null;
                }).filter(Boolean);

                if (parsedOrder.length === 0) {
                    throw new Error('Nenhuma ordem de constru√ß√£o v√°lida encontrada no script.');
                }
                
                console.log(`[DEBUG] 9. Ordem padr√£o carregada com sucesso com ${parsedOrder.length} itens.`);
                return parsedOrder;

            } catch (error) {
                console.error('[DEBUG] ERRO em loadDefaultOrder:', error);
                showStatus(`Erro ao carregar ordem padr√£o: ${error.message}`, true);
                return [{ building: 'wood', level: 1 }]; // Retorna fallback
            }
        }

        const showStatus = (message, isError = false) => { /* ... (sem altera√ß√µes) ... */ };
        const renderCustomOrder = () => { /* ... (sem altera√ß√µes) ... */ };
        const populateBuildingControls = () => {
            console.log('[DEBUG] 3. Entrando em populateBuildingControls para criar os bot√µes.');
            controlsContainer.innerHTML = '';
            Object.keys(BUILDING_INFO).forEach(buildingKey => {
                // ... (l√≥gica interna sem altera√ß√µes)
            });
            console.log('[DEBUG] 3.1. Bot√µes de edif√≠cios criados.');
        };
        
        async function initialize() {
            console.log('[DEBUG] 2. Entrando na fun√ß√£o initialize.');
            populateBuildingControls();
            
            DEFAULT_BUILD_ORDER = await loadDefaultOrder();
            console.log('[DEBUG] 10. Sa√≠ de loadDefaultOrder. Continuando a inicializa√ß√£o...');
            
            const savedOrder = localStorage.getItem('customBuildOrder');
            currentBuildOrder = savedOrder ? JSON.parse(savedOrder) : [...DEFAULT_BUILD_ORDER];
            renderCustomOrder();
            console.log('[DEBUG] 11. Inicializa√ß√£o completa. A p√°gina deve estar pronta.');
        }

        // --- EVENT LISTENERS ---
        // (Toda a l√≥gica dos listeners continua a mesma)

        // --- INICIALIZA√á√ÉO DA P√ÅGINA ---
        initialize();
    });
</script>

</body>
</html>
