<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personalizar Script - MULTCONTROL</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

    <style>
        body { font-family: 'Roboto', sans-serif; margin: 0; padding: 0; background-color: #f4f7f6; display: flex; flex-direction: column; align-items: center; }
        .navbar { background-color: #2c3e50; width: 100%; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .navbar-container { max-width: 1200px; margin: 0 auto; display: flex; justify-content: flex-start; }
        .navbar a { float: left; color: white; text-align: center; padding: 14px 20px; text-decoration: none; font-size: 17px; font-weight: bold; transition: background-color 0.3s; }
        .navbar a:hover { background-color: #3498db; }
        .navbar a.active { background-color: #2980b9; }
        .main-container { padding: 20px; width: 100%; max-width: 1100px; box-sizing: border-box; }
        .grid-container { display: grid; grid-template-columns: 1fr 2fr; gap: 30px; }
        .panel { background-color: #fff; padding: 25px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); }
        h1, h2 { color: #2c3e50; border-bottom: 2px solid #eee; padding-bottom: 10px; margin-top: 0; }
        .profile-manager { grid-column: 1 / -1; margin-bottom: 20px; }
        .profile-manager select { width: 100%; padding: 10px; font-size: 1.1em; }
        .btn-import { background-color: #546e7a; color: white; margin-left:10px; }
        .btn-import:hover { background-color: #455a64; }
        #building-controls-container { display: flex; flex-direction: column; gap: 12px; }
        .building-control-row { display: flex; align-items: center; justify-content: space-between; background-color: #f8f9fa; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef; }
        .building-name { font-weight: 500; flex-basis: 50%; }
        .building-inputs { display: flex; align-items: center; gap: 8px; }
        .building-inputs input { width: 50px; text-align: center; padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-size: 0.9em; }
        .btn { border: none; border-radius: 5px; padding: 8px 15px; cursor: pointer; font-size: 0.9em; font-weight: bold; transition: background-color 0.3s; }
        .btn:disabled { background-color: #ccc; cursor: not-allowed; }
        .btn-add { background-color: #3498db; color: white; }
        #custom-order-list { min-height: 200px; max-height: 500px; overflow-y: auto; border: 1px dashed #ccc; border-radius: 5px; padding: 10px; background-color: #fafafa; }
        .order-item { display: flex; justify-content: space-between; align-items: center; background-color: #e3f2fd; padding: 10px; border-radius: 4px; margin-bottom: 5px; font-weight: 500; }
        .delete-btn { background: #e57373; color: white; border: none; border-radius: 50%; width: 22px; height: 22px; cursor: pointer; font-weight: bold; line-height: 22px; text-align: center; }
        .action-buttons { margin-top: 20px; display: flex; flex-wrap: wrap; gap: 10px; }
        .btn-save { background-color: #28a745; color: white; }
        .btn-clear { background-color: #e53935; color: white; }
        #script-generation-panel { grid-column: 1 / -1; margin-top: 20px; }
        #status-message { margin-top: 15px; color: #218838; font-weight: bold; text-align: center; height: 20px; }
        #script-list-container { display: flex; flex-direction: column; gap: 12px; }
        .script-list-item { display: flex; align-items: center; justify-content: space-between; background-color: #f8f9fa; padding: 10px 15px; border-radius: 5px; border: 1px solid #e9ecef; }
        .script-list-item strong { font-size: 1.1em; color: #333; }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.6); display: none; align-items: center; justify-content: center; z-index: 1000; }
        .modal-content { background: white; padding: 30px; border-radius: 8px; width: 90%; max-width: 600px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
        .modal-content h2 { margin-top: 0; }
        .modal-content textarea { width: 100%; height: 200px; box-sizing: border-box; font-family: 'Consolas', monospace; font-size: 0.9em; margin-top: 10px; background-color: #f4f4f4; color: #333; padding: 10px; border-radius: 5px; }
        .modal-actions { margin-top: 20px; display: flex; justify-content: flex-end; gap: 10px; }
    </style>
</head>
<body>

<nav class="navbar">
    <div class="navbar-container">
        <a href="/dashboard.html">Dashboard</a>
        <a href="/personalizar" class="active">Personalizar Scripts</a>
    </div>
</nav>

<div class="main-container">
    <h1>Gerenciador de Estrat√©gias de Constru√ß√£o</h1>
    
    <div class="panel profile-manager">
        <h2>Meus Perfis de Constru√ß√£o</h2>
        <div style="display: flex; gap: 10px; align-items: center;">
            <select id="profile-select" style="flex-grow: 1;">
                <option value="new">--- Criar Nova Ordem de Constru√ß√£o ---</option>
            </select>
            <button id="import-game-btn" class="btn btn-import">Importar do Jogo</button>
        </div>
    </div>

    <div class="grid-container">
        <div class="panel add-panel">
            <h2>Editor de Passos</h2>
            <div id="building-controls-container"><p>Aguardando autentica√ß√£o...</p></div>
        </div>

        <div class="panel custom-order">
            <h2 id="current-profile-name">Nova Ordem de Constru√ß√£o</h2>
            <div id="custom-order-list"><p>Selecione um perfil para carregar ou adicione passos para uma nova ordem.</p></div>
            <div class="action-buttons">
                <button id="save-order-btn" class="btn btn-save">Salvar Ordem Atual</button>
                <button id="delete-order-btn" class="btn btn-clear" style="display: none;">Deletar Perfil</button>
            </div>
            <div id="status-message"></div>
        </div>

        <div id="script-generation-panel" class="panel">
            <h2>Copiar Script de um Perfil Salvo</h2>
            <div id="script-list-container">
                <p>Nenhum perfil salvo encontrado. Salve um perfil para poder copiar o script.</p>
            </div>
        </div>
    </div>
</div>

<div id="import-modal" class="modal-overlay">
    <div class="modal-content">
        <h2>Importar Ordem do Gerente de Contas</h2>
        <p>Copie o c√≥digo de exporta√ß√£o do seu Gerente de Contas do Tribal Wars e cole no campo abaixo.</p>
        <textarea id="import-textarea" placeholder="Cole o c√≥digo aqui..."></textarea>
        <div class="modal-actions">
            <button id="process-import-btn" class="btn btn-save">Importar</button>
            <button id="close-import-modal-btn" class="btn btn-clear">Cancelar</button>
        </div>
    </div>
</div>

<script>
    const firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    document.addEventListener('DOMContentLoaded', () => {
        // --- CONFIGURA√á√ïES E ESTADO ---
        const ID_TO_NAME = { 0: 'main', 1: 'barracks', 2: 'stable', 3: 'garage', 4: 'smith', 5: 'place', 6: 'statue', 7: 'market', 8: 'wood', 9: 'stone', 10: 'iron', 11: 'farm', 12: 'storage', 13: 'hide', 14: 'wall', 15: 'snob', 16: 'academy', 18: 'watchtower' };
        const BUILDING_INFO = {
            'main': { name: 'Edif√≠cio Principal', icon: 'üèõÔ∏è' }, 'barracks': { name: 'Quartel', icon: '‚öîÔ∏è' }, 'stable': { name: 'Est√°bulo', icon: 'üêé' },
            'garage': { name: 'Oficina', icon: '‚öôÔ∏è' }, 'smith': { name: 'Ferreiro', icon: 'üõ†Ô∏è' }, 'place': { name: 'Pra√ßa de Reuni√£o', icon: 'üö©' },
            'statue': { name: 'Est√°tua', icon: 'üóø' }, 'market': { name: 'Mercado', icon: 'üí∞' }, 'wood': { name: 'Bosque', icon: 'üå≥' },
            'stone': { name: 'Po√ßo de Argila', icon: 'üß±' }, 'iron': { name: 'Mina de Ferro', icon: '‚õèÔ∏è' }, 'farm': { name: 'Fazenda', icon: 'üåæ' },
            'storage': { name: 'Armaz√©m', icon: 'üì¶' }, 'hide': { name: 'Esconderijo', icon: 'ü§´' }, 'wall': { name: 'Muralha', icon: 'üõ°Ô∏è' },
            'snob': { name: 'Academia de Nobres', icon: 'üëë' }, 'academy': { name: 'Academia', icon: 'üéì' }, 'watchtower': { name: 'Torre de Vigia', icon: 'üî≠' },
            'hospital': { name: 'Hospital', icon: 'üè•' }, 'church': { name: 'Igreja', icon: '‚õ™' }, 'trade': { name: 'Posto de Trocas', icon: 'ü§ù' }
        };
        let allProfiles = [];
        let currentProfile = null;
        let currentBuildOrder = [];

        // --- ELEMENTOS DA DOM ---
        const profileSelect = document.getElementById('profile-select');
        const controlsContainer = document.getElementById('building-controls-container');
        const customList = document.getElementById('custom-order-list');
        const currentProfileNameEl = document.getElementById('current-profile-name');
        const saveBtn = document.getElementById('save-order-btn');
        const deleteBtn = document.getElementById('delete-order-btn');
        const scriptListContainer = document.getElementById('script-list-container');
        const statusMsg = document.getElementById('status-message');
        const importGameBtn = document.getElementById('import-game-btn');
        const importModal = document.getElementById('import-modal');
        const importTextarea = document.getElementById('import-textarea');
        const processImportBtn = document.getElementById('process-import-btn');
        const closeImportModalBtn = document.getElementById('close-import-modal-btn');
        
        // --- FUN√á√ïES ---
        async function apiRequest(endpoint, method = 'GET', body = null) {
            if (!auth.currentUser) throw new Error('Usu√°rio n√£o autenticado.');
            const idToken = await auth.currentUser.getIdToken();
            const options = { method, headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${idToken}` } };
            if (body) options.body = JSON.stringify(body);
            const response = await fetch(`/api/${endpoint}`, options);
            const contentType = response.headers.get("content-type");
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Falha na requisi√ß√£o √† API.');
            }
            if (contentType?.includes("application/json")) return await response.json();
            return await response.text();
        }

        const showStatus = (message, isError = false) => {
             statusMsg.textContent = message;
             statusMsg.style.color = isError ? '#e53935' : '#28a745';
             setTimeout(() => statusMsg.textContent = '', 4000);
        };

        function populateProfileSelect() {
            profileSelect.innerHTML = '<option value="new">--- Criar Nova Ordem de Constru√ß√£o ---</option>';
            allProfiles.forEach(profile => {
                const option = document.createElement('option');
                option.value = profile.id;
                option.textContent = profile.profileName;
                profileSelect.appendChild(option);
            });
            profileSelect.value = currentProfile ? currentProfile.id : 'new';
        }

        function loadProfile(profileId) {
            if (profileId === 'new') {
                currentProfile = null;
                currentBuildOrder = [];
                currentProfileNameEl.textContent = "Nova Ordem de Constru√ß√£o";
                deleteBtn.style.display = 'none';
            } else {
                currentProfile = allProfiles.find(p => p.id === profileId);
                currentBuildOrder = currentProfile ? [...currentProfile.order] : [];
                currentProfileNameEl.textContent = `Editando: ${currentProfile.profileName}`;
                deleteBtn.style.display = 'inline-block';
            }
            renderCustomOrder();
        }

        async function handleSaveProfile() {
            let profileName = currentProfile ? currentProfile.profileName : '';
            if (!currentProfile) {
                profileName = prompt("Por favor, d√™ um nome para esta nova ordem:", profileName || "Minha Estrat√©gia");
                if (!profileName) return;
            }
            const profileData = { profileName, order: currentBuildOrder };
            try {
                if (currentProfile) {
                    await apiRequest(`build-orders/${currentProfile.id}`, 'PUT', profileData);
                    const index = allProfiles.findIndex(p => p.id === currentProfile.id);
                    allProfiles[index] = { ...allProfiles[index], ...profileData };
                } else {
                    const newProfileData = await apiRequest('build-orders', 'POST', profileData);
                    allProfiles.unshift(newProfileData);
                    currentProfile = newProfileData;
                }
                populateProfileSelect();
                renderScriptList();
                showStatus('Perfil salvo com sucesso!', false);
            } catch (error) { showStatus(`Erro ao salvar: ${error.message}`, true); }
        }

        async function handleDeleteProfile() {
            if (!currentProfile || !confirm(`Deletar o perfil "${currentProfile.profileName}"?`)) return;
            try {
                await apiRequest(`build-orders/${currentProfile.id}`, 'DELETE');
                allProfiles = allProfiles.filter(p => p.id !== currentProfile.id);
                loadProfile('new');
                populateProfileSelect();
                renderScriptList();
                showStatus('Perfil deletado.', false);
            } catch(error) { showStatus(`Erro ao deletar: ${error.message}`, true); }
        }

        function renderScriptList() {
            scriptListContainer.innerHTML = '';
            if (allProfiles.length === 0) {
                scriptListContainer.innerHTML = '<p>Nenhum perfil salvo encontrado.</p>';
                return;
            }
            allProfiles.forEach(profile => {
                const item = document.createElement('div');
                item.className = 'script-list-item';
                item.innerHTML = `<strong>${profile.profileName}</strong><button class="btn btn-save copy-script-btn" data-profile-id="${profile.id}">Copiar Script</button>`;
                scriptListContainer.appendChild(item);
            });
        }
        
        async function generateAndCopyScript(profile, buttonElement) {
            const originalText = buttonElement.textContent;
            buttonElement.textContent = 'Gerando...';
            buttonElement.disabled = true;
            try {
                const finalScript = await apiRequest('generate-custom-script', 'POST', { order: profile.order });
                await navigator.clipboard.writeText(finalScript);
                showStatus(`Script para "${profile.profileName}" copiado com sucesso!`);
            } catch (error) {
                showStatus(`Erro ao gerar script: ${error.message}`, true);
            } finally {
                buttonElement.textContent = originalText;
                buttonElement.disabled = false;
            }
        }
        
        const renderCustomOrder = () => {
            customList.innerHTML = '';
            if (currentBuildOrder.length === 0) {
                customList.innerHTML = '<p>Ordem de constru√ß√£o vazia.</p>';
                return;
            }
            currentBuildOrder.forEach((item, index) => {
                const info = BUILDING_INFO[item.building] || { name: item.building, icon: '‚ùì' };
                const el = document.createElement('div');
                el.className = 'order-item';
                el.innerHTML = `<span>${index + 1}. ${info.icon} <strong>${info.name}</strong> - N√≠vel ${item.level}</span><button class="delete-btn" data-index="${index}">√ó</button>`;
                customList.appendChild(el);
            });
        };

        const populateBuildingControls = () => {
            controlsContainer.innerHTML = '';
            Object.keys(BUILDING_INFO).forEach(buildingKey => {
                const info = BUILDING_INFO[buildingKey];
                const controlRow = document.createElement('div');
                controlRow.className = 'building-control-row';
                controlRow.innerHTML = `<span class="building-name">${info.icon} ${info.name}</span><div class="building-inputs"><input type="number" value="1" min="1" max="30" class="quantity-input" data-building="${buildingKey}"><button class="btn btn-add" data-building="${buildingKey}">Adicionar</button></div>`;
                controlsContainer.appendChild(controlRow);
            });
        };
        
        function parseGameExportCode(code) {
            try {
                const decodedString = atob(code.trim());
                const buildOrder = [];
                for (let i = 0; i < decodedString.length; i += 2) {
                    const buildingId = decodedString.charCodeAt(i);
                    const level = decodedString.charCodeAt(i + 1);
                    const buildingName = ID_TO_NAME[buildingId];
                    if (buildingName && level > 0) {
                        buildOrder.push({ building: buildingName, level: level });
                    }
                }
                return buildOrder;
            } catch (e) {
                console.error("Erro ao decodificar o c√≥digo:", e);
                throw new Error("O c√≥digo fornecido √© inv√°lido ou est√° em um formato irreconhec√≠vel.");
            }
        }

        async function initialize() {
            auth.onAuthStateChanged(async (user) => {
                if (user) {
                    populateBuildingControls();
                    try {
                        allProfiles = await apiRequest('build-orders');
                        populateProfileSelect();
                        renderScriptList();
                        loadProfile('new');
                    } catch (error) {
                        showStatus(`N√£o foi poss√≠vel carregar seus perfis: ${error.message}`, true);
                    }
                } else {
                    document.body.innerHTML = '<h1>Acesso Negado</h1><p>Voc√™ precisa estar logado para acessar esta p√°gina. Por favor, retorne √† <a href="/">p√°gina de login</a>.</p>';
                }
            });
        }

        // --- EVENT LISTENERS ---
        profileSelect.addEventListener('change', (e) => loadProfile(e.target.value));
        saveBtn.addEventListener('click', handleSaveProfile);
        deleteBtn.addEventListener('click', handleDeleteProfile);
        
        controlsContainer.addEventListener('click', (e) => {
             if (e.target.classList.contains('btn-add')) {
                const building = e.target.dataset.building;
                const input = controlsContainer.querySelector(`.quantity-input[data-building="${building}"]`);
                const quantity = parseInt(input.value, 10);
                if (isNaN(quantity) || quantity < 1) { alert('Quantidade inv√°lida.'); return; }
                let lastLevel = 0;
                for (let i = currentBuildOrder.length - 1; i >= 0; i--) {
                    if (currentBuildOrder[i].building === building) {
                        lastLevel = currentBuildOrder[i].level;
                        break;
                    }
                }
                for (let i = 1; i <= quantity; i++) {
                    const newLevel = lastLevel + i;
                    if (newLevel > 30) {
                        showStatus(`Limite de n√≠vel 30 atingido para "${BUILDING_INFO[building].name}"`, true);
                        break;
                    }
                    currentBuildOrder.push({ building, level: newLevel });
                }
                renderCustomOrder();
             }
        });
        
        customList.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-btn')) {
                currentBuildOrder.splice(parseInt(e.target.dataset.index, 10), 1);
                renderCustomOrder();
            }
        });

        scriptListContainer.addEventListener('click', async (e) => {
            if (e.target.classList.contains('copy-script-btn')) {
                const profileId = e.target.dataset.profileId;
                const profileToCopy = allProfiles.find(p => p.id === profileId);
                if (profileToCopy) {
                    await generateAndCopyScript(profileToCopy, e.target);
                }
            }
        });

        importGameBtn.addEventListener('click', () => {
            importTextarea.value = '';
            importModal.style.display = 'flex';
        });

        closeImportModalBtn.addEventListener('click', () => {
            importModal.style.display = 'none';
        });

        processImportBtn.addEventListener('click', () => {
            const code = importTextarea.value;
            if (!code) { alert('Por favor, cole um c√≥digo para importar.'); return; }
            try {
                const newOrder = parseGameExportCode(code);
                if (newOrder.length === 0) throw new Error("Nenhuma ordem de constru√ß√£o v√°lida foi encontrada no c√≥digo.");
                currentProfile = null;
                currentBuildOrder = newOrder;
                renderCustomOrder();
                currentProfileNameEl.textContent = "Nova Ordem (Importada)";
                profileSelect.value = 'new';
                deleteBtn.style.display = 'none';
                importModal.style.display = 'none';
                showStatus('Ordem importada com sucesso! Clique em "Salvar Ordem" para criar um novo perfil.');
            } catch (error) { alert(`Erro na importa√ß√£o: ${error.message}`); }
        });
        
        initialize();
    });
</script>

</body>
</html>
