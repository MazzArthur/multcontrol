<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Central de Alertas MULTCONTROL</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f7f6;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
        }
        header {
            width: 100%;
            max-width: 1200px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid #eee;
        }
        header h1 {
            color: #2c3e50;
            margin: 0;
            font-size: 2em;
        }
        .user-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 5px;
        }
        .user-info p {
            margin: 0;
            font-size: 0.9em;
            color: #555;
        }
        .user-info p strong {
            font-size: 1em;
            color: #2c3e50;
        }
        button {
            background-color: #FF5722;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: bold;
            transition: background-color 0.3s ease;
            margin-top: 10px;
        }
        button:hover {
            background-color: #E64A19;
        }
        .script-generation-section {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 25px;
            margin-bottom: 30px;
            width: 100%;
            max-width: 1200px;
            box-sizing: border-box;
        }
        .script-generation-section h2 {
            text-align: center;
            color: #34495e;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        .script-type-box {
            background-color: #e3f2fd;
            border: 1px solid #90caf9;
            border-radius: 8px;
            padding: 15px 20px;
            margin-bottom: 15px;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        .script-type-box strong {
            color: #1976D2;
            font-size: 1.1em;
            display: block;
            margin-bottom: 0;
            flex-grow: 1;
        }
        .script-code-box {
            display: none; /* Oculta a caixa de c√≥digo inicialmente */
            background-color: #f0f0f0;
            border: 1px dashed #ccc;
            padding: 10px;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 0.8em;
            white-space: pre-wrap;
            overflow-x: auto;
            max-height: 250px;
            cursor: text;
            width: 100%;
            margin-top: 10px;
        }
        .copy-script-button {
            background-color: #2196F3;
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8em;
            margin-top: 0;
            transition: background-color 0.2s;
            flex-shrink: 0;
        }
        .copy-script-button:hover {
            background-color: #1976D2;
        }
        .main-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            width: 100%;
            max-width: 1200px;
            justify-content: center;
            align-items: flex-start;
            flex-grow: 1;
        }
        .alert-box {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 30px;
            flex: 1;
            min-width: 300px;
            max-width: 380px;
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
        }
        h2 {
            color: #34495e;
            text-align: center;
            margin-bottom: 20px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        .alerts-list {
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            min-height: 150px;
            max-height: 300px;
            overflow-y: auto;
            padding: 15px;
            background-color: #fafafa;
            flex-grow: 1;
        }
        .alert-item {
            display: flex;
            align-items: flex-start; /* Altera para alinhar no topo para que emojis grandes n√£o cortem o texto */
            margin-bottom: 10px;
            padding: 10px 15px;
            background-color: #e3f2fd;
            border-left: 5px solid #2196F3;
            border-radius: 4px;
            transition: transform 0.2s ease-in-out;
            font-size: 0.9em;
        }
        .alert-item.captcha {
            border-left-color: #FFC107;
            background-color: #FFFDE7;
        }
        .alert-item.build-order {
            border-left-color: #4CAF50;
            background-color: #E8F5E9;
        }
        .alert-item.attack-alert {
            border-left-color: #D32F2F;
            background-color: #FFEBEE;
        }
        .alert-item:last-child {
            margin-bottom: 0;
        }
        .alert-item:hover {
            transform: translateY(-2px);
        }
        .alert-item .timestamp {
            font-weight: bold;
            color: #1976D2;
            margin-right: 10px;
            flex-shrink: 0;
            min-width: 65px; /* Garante espa√ßo para a hora */
        }
        .alert-item.captcha .timestamp {
            color: #FFA000;
        }
        .alert-item.build-order .timestamp {
            color: #388E3C;
        }
        .alert-item.attack-alert .timestamp {
            color: #C62828;
        }
        .alert-item .message {
            flex-grow: 1;
            word-break: break-word;
            display: flex; /* Para alinhar emoji com texto da mensagem */
            align-items: flex-start;
        }
        .alert-item .message .emoji-prefix {
            margin-right: 5px;
            font-size: 1.2em; /* Tamanho maior para o emoji */
            line-height: 1; /* Garante que o emoji fique alinhado com a primeira linha de texto */
            flex-shrink: 0;
        }
        .no-alerts {
            text-align: center;
            color: #777;
            padding: 20px;
        }
        /* Scrollbar styling */
        .alerts-list::-webkit-scrollbar {
            width: 8px;
        }
        .alerts-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .alerts-list::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        .alerts-list::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body>
    <header>
        <h1>üö® Central de Alertas Tribal Wars üö®</h1>
        <div class="user-info">
            <p id="userEmailDisplay"></p>
            <p>UID: <strong id="userUidDisplay"></strong></p>
            <button id="logoutBtn">Sair</button>
        </div>
    </header>

    <div class="script-generation-section">
        <h2>Seus Scripts Personalizados (Copiar e Colar no Tampermonkey)</h2>
        <p style="font-size: 0.9em; text-align: center; margin-bottom: 20px; color: #666;">
            **Instru√ß√µes:** Fa√ßa login aqui, copie o c√≥digo completo de cada script abaixo, abra seu Tampermonkey (ou similar), crie um novo script e cole o c√≥digo. Salve e ative o script no Tribal Wars.
        </p>

        <div class="script-type-box">
            <strong>1. Script: Alerta de Captcha (FUS√ÉO FINAL E LIMP√çSSIMA)</strong>
            <button class="copy-script-button" data-script-id="captchaScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="captchaScriptCode"></code>
            </div>
        </div>

        <div class="script-type-box">
            <strong>2. Script: Upador Automatico editado + Coleta Recompensa + Refresh Autom√°tico + Alerta de Constru√ß√£o</strong>
            <button class="copy-script-button" data-script-id="upadorScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="upadorScriptCode"></code>
            </div>
        </div>

        <div class="script-type-box">
            <strong>3. Script: Alerta de Ataques (Tribal Wars)</strong>
            <button class="copy-script-button" data-script-id="attackScriptCode">Copiar</button>
            <div class="script-code-box">
                <code id="attackScriptCode"></code>
            </div>
        </div>
    </div>

    <div class="main-container">
        <div class="alert-box captcha-box">
            <h2>Alertas de Captcha</h2>
            <div id="captchaAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando alertas de Captcha...</p>
            </div>
        </div>

        <div class="alert-box build-order-box">
            <h2>Ordens de Constru√ß√£o</h2>
            <div id="buildOrderAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando ordens de constru√ß√£o...</p>
            </div>
        </div>

        <div class="alert-box attack-box">
            <h2>Alertas de Ataque</h2>
            <div id="attackAlertsList" class="alerts-list">
                <p class="no-alerts">Aguardando alertas de ataque...</p>
            </div>
        </div>
    </div>

    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

    <script>
        console.log("Configurando Firebase diretamente no HTML do dashboard...");
        const firebaseConfig = <%- JSON.stringify(firebaseConfig) %>;
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const dbClient = firebase.firestore(); // ADICIONADO: Inicializa o Firestore client-side
        console.log("Firebase, Auth e Firestore Client-side inicializados via EJS.");
        console.log("Valor de 'auth' ap√≥s inicializacao:", auth);
    </script>

    <script>
        console.log("Script principal do dashboard carregado.");
        
        initializeDashboardPage();

        window.copyScript = function(elementId) {
            const element = document.getElementById(elementId);
            if (element && navigator.clipboard) {
                const textToCopy = element.textContent;
                navigator.clipboard.writeText(textToCopy).then(() => {
                    alert('Script copiado para a √°rea de transfer√™ncia!');
                }).catch(err => {
                    console.error('Erro ao copiar texto: ', err);
                    alert('N√£o foi poss√≠vel copiar o script. Por favor, selecione e copie manualmente.');
                });
            } else {
                alert('Seu navegador n√£o suporta a c√≥pia autom√°tica. Por favor, selecione o texto e copie manualmente.');
            }
        };

        function initializeDashboardPage() {
            console.log("Fun√ß√£o initializeDashboardPage() iniciada.");

            const userEmailDisplay = document.getElementById('userEmailDisplay');
            const logoutBtn = document.getElementById('logoutBtn');
            const userUidDisplay = document.getElementById('userUidDisplay');
            
            const captchaScriptCodeElement = document.getElementById('captchaScriptCode');
            const upadorScriptCodeElement = document.getElementById('upadorScriptCode');
            const attackScriptCodeElement = document.getElementById('attackScriptCode'); // Corrigido aqui (apenas 1 =)

            const captchaAlertsList = document.getElementById('captchaAlertsList');
            const buildOrderAlertsList = document.getElementById('buildOrderAlertsList');
            const attackAlertsList = document.getElementById('attackAlertsList');
            
            // backendUrl agora √© usada apenas para a rota de scripts, n√£o mais para alertas
            const backendUrl = 'https://multcontrol.onrender.com'; 

            if (!userEmailDisplay || !logoutBtn || !userUidDisplay || !captchaScriptCodeElement || !upadorScriptCodeElement || !attackScriptCodeElement || !captchaAlertsList || !buildOrderAlertsList || !attackAlertsList) {
                console.error("Um ou mais elementos HTML essenciais do dashboard n√£o foram encontrados. Interrompendo a inicializa√ß√£o.");
                return;
            }

            console.log("Todos os elementos HTML essenciais do dashboard encontrados.");

            document.querySelectorAll('.copy-script-button').forEach(button => {
                button.addEventListener('click', (event) => {
                    const scriptId = event.target.dataset.scriptId;
                    window.copyScript(scriptId);
                });
            });

            auth.onAuthStateChanged(async user => {
                if (user) {
                    console.log('Usu√°rio logado no dashboard:', user.email);
                    userEmailDisplay.textContent = `Logado como: ${user.email}`;
                    userUidDisplay.textContent = user.uid;

                    try {
                        const idToken = await user.getIdToken();

                        const response = await fetch(`${backendUrl}/get_userscripts_with_token`, {
                            headers: {
                                'Authorization': `Bearer ${idToken}`
                            }
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const scriptsBase64 = await response.json();

                        captchaScriptCodeElement.textContent = atob(scriptsBase64.captchaScriptBase64);
                        upadorScriptCodeElement.textContent = atob(scriptsBase64.upadorScriptBase64);
                        attackScriptCodeElement.textContent = atob(scriptsBase64.ataquesScriptBase64);

                    } catch (error) {
                        console.error('Erro ao obter ID Token, decodificar ou gerar snippets:', error);
                        captchaScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}. Verifique o console.`;
                        upadorScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}. Verifique o console.`;
                        attackScriptCodeElement.textContent = `Erro ao carregar script: ${error.message}. Verifique o console.`;
                    }
                    
                    // --- NOVA L√ìGICA: LISTENER DE ALERTAS EM TEMPO REAL ---
                    console.log("[Dashboard] Configurando listener de alertas em tempo real...");
                    dbClient.collection('alerts')
                        .where('userId', '==', user.uid)
                        .orderBy('timestamp', 'desc')
                        .onSnapshot((snapshot) => {
                            console.log("[Dashboard] Snapshot de alertas recebido!");
                            const alerts = [];
                            
                            // Use docChanges para identificar apenas os novos documentos e notificar
                            snapshot.docChanges().forEach(change => {
                                if (change.type === "added") { // Detecta um novo documento
                                    const newAlertData = change.doc.data();
                                    const alertMessage = newAlertData.message;
                                    const nickname = newAlertData.userEmail.split('@')[0] || 'Desconhecido'; // Extrai nickname do email

                                    // Disparar notifica√ß√£o apenas se a aba n√£o estiver em foco
                                    if (document.hidden && Notification.permission === "granted") {
                                        if (alertMessage.includes('CAPTCHA NECESSARIO!')) {
                                            new Notification("üö® A√á√ÉO NECESS√ÅRIA! Captcha!", {
                                                body: `Captcha detectado para a conta: ${nickname}`,
                                                icon: 'https://www.google.com/favicon.ico'
                                            });
                                            console.log("[Dashboard] Notifica√ß√£o de Captcha disparada.");
                                        } else if (alertMessage.includes('ATAQUE(S) NOVO(S)!')) {
                                            new Notification("‚öîÔ∏è NOVO ATAQUE EM TRIBAL WARS!", {
                                                body: `A conta ${nickname} tem novos ataques a chegar!`,
                                                icon: 'https://dsbr.innogamescdn.com/asset/75cb846c/graphic/unit/att.webp'
                                            });
                                            console.log("[Dashboard] Notifica√ß√£o de Ataque disparada.");
                                        }
                                    }
                                }
                                // Reconstroi a lista completa de alertas para renderizar (mesmo para 'modified'/'removed')
                                const data = change.doc.data();
                                const timestamp = data.timestamp ? data.timestamp.toDate().toISOString() : new Date().toISOString();
                                alerts.push({
                                    id: change.doc.id,
                                    message: data.message,
                                    timestamp: timestamp,
                                    userId: data.userId,
                                    userEmail: data.userEmail || 'N/A'
                                });
                            });
                            
                            // Otimiza√ß√£o: Apenas renderiza se houver mudan√ßas que afetam a lista final
                            // (removido o if alerts.length > 0 para sempre limpar e renderizar)
                            captchaAlertsList.innerHTML = '';
                            buildOrderAlertsList.innerHTML = '';
                            attackAlertsList.innerHTML = '';

                            let hasCaptchaAlerts = false;
                            let hasBuildOrderAlerts = false;
                            let hasAttackAlerts = false;

                            // Ordena os alertas do mais novo para o mais antigo para a UI
                            alerts.sort((a, b) => {
                                const dateA = convertTimestampToDate(a.timestamp);
                                const dateB = convertTimestampToDate(b.timestamp);
                                if (isNaN(dateA.getTime())) return 1;
                                if (isNaN(dateB.getTime())) return -1;
                                return dateB.getTime() - dateA.getTime();
                            });

                            alerts.forEach(alert => {
                                const div = document.createElement('div');
                                div.className = 'alert-item';

                                const timestampSpan = document.createElement('span');
                                timestampSpan.className = 'timestamp';
                                
                                const date = convertTimestampToDate(alert.timestamp);
                                if (!isNaN(date.getTime())) {
                                    timestampSpan.textContent = date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
                                } else {
                                    timestampSpan.textContent = 'Data Inv√°lida';
                                    console.warn('[Dashboard] Timestamp recebido inv√°lido:', alert.timestamp);
                                }

                                const messageSpan = document.createElement('span');
                                messageSpan.className = 'message';
                                
                                const rawMessage = alert.message;
                                const cleanMessageForCategory = rawMessage.replace(/^[^\w\s]*\s*/, '');

                                let emojiPrefix = '';
                                if (cleanMessageForCategory.includes('CAPTCHA NECESSARIO!')) {
                                    emojiPrefix = 'üö®‚ö†Ô∏è';
                                    div.classList.add('captcha');
                                    captchaAlertsList.appendChild(div);
                                    hasCaptchaAlerts = true;
                                } else if (cleanMessageForCategory.includes('Construcao Iniciada')) {
                                    emojiPrefix = 'üö®üè∞';
                                    div.classList.add('build-order');
                                    buildOrderAlertsList.appendChild(div);
                                    hasBuildOrderAlerts = true;
                                } else if (cleanMessageForCategory.includes('ATAQUE(S) NOVO(S)!')) {
                                    emojiPrefix = 'üö®‚öîÔ∏è';
                                    div.classList.add('attack-alert');
                                    attackAlertsList.appendChild(div);
                                    hasAttackAlerts = true;
                                } else {
                                    emojiPrefix = '‚ÑπÔ∏è';
                                    div.classList.add('general');
                                    buildOrderAlertsList.appendChild(div);
                                }
                                
                                const emojiSpan = document.createElement('span');
                                emojiSpan.className = 'emoji-prefix';
                                emojiSpan.textContent = emojiPrefix;
                                messageSpan.appendChild(emojiSpan);
                                messageSpan.appendChild(document.createTextNode(cleanMessageForCategory));

                                div.appendChild(timestampSpan);
                                div.appendChild(messageSpan);
                            });

                            if (!hasCaptchaAlerts) {
                                captchaAlertsList.innerHTML = '<p class="no-alerts">Nenhum alerta de Captcha recente.</p>';
                            }
                            if (!hasBuildOrderAlerts) {
                                buildOrderAlertsList.innerHTML = '<p class="no-alerts">Nenhuma ordem de constru√ß√£o recente.</p>';
                            }
                            if (!hasAttackAlerts) {
                                attackAlertsList.innerHTML = '<p class="no-alerts">Nenhum alerta de ataque recente.</p>';
                            }

                        }, (error) => {
                            console.error('[Dashboard] Erro ao ouvir alertas em tempo real:', error);
                            captchaAlertsList.innerHTML = '<p class="no-alerts" style="color: #d32f2f;">Erro ao carregar alertas de Captcha.</p>';
                            buildOrderAlertsList.innerHTML = '<p class="no-alerts" style="color: #d32f2f;">Erro ao carregar ordens de constru√ß√£o.</p>';
                            attackAlertsList.innerHTML = '<p class="no-alerts" style="color: #d32f2f;">Erro ao carregar alertas de ataque.</p>';
                        });
                    // --- FIM DA NOVA L√ìGICA ---

                } else {
                    console.log('Nenhum usu√°rio logado. Redirecionando para a p√°gina de login.');
                    window.location.href = '/';
                }
            });

            logoutBtn.addEventListener('click', async () => {
                console.log("Bot√£o Sair clicado.");
                try {
                    await auth.signOut();
                    console.log('Usu√°rio deslogado.');
                    window.location.href = '/';
                } catch (error) {
                    console.error('Erro ao deslogar:', error);
                    alert('Erro ao sair. Tente novamente.');
                }
            });

            // Sua fun√ß√£o auxiliar para converter o timestamp (mantenha-a aqui)
            function convertTimestampToDate(timestamp) {
                if (timestamp instanceof Date) {
                    return timestamp;
                }
                if (typeof timestamp === 'string') {
                    const date = new Date(timestamp);
                    if (!isNaN(date.getTime())) {
                        return date;
                    }
                }
                if (typeof timestamp === 'object' && timestamp !== null) {
                    if (timestamp._seconds !== undefined && timestamp._nanoseconds !== undefined) {
                        return new Date(timestamp._seconds * 1000 + timestamp._nanoseconds / 1000000);
                    }
                    if (typeof timestamp.toDate === 'function') {
                        return timestamp.toDate();
                    }
                }
                return new Date('invalid date');
            }

        } // Fim de initializeDashboardPage
    </script>
</body>
</html>
